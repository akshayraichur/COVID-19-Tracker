{"version":3,"sources":["components/Card.js","components/TotalCases.js","components/ListComponent.js","components/ListofCountry.js","components/About.js","components/Tabs.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","media","height","MediaCard","props","cases","deaths","recovered","classes","Grid","container","direction","justify","alignItems","item","Card","className","CardActionArea","CardContent","Typography","gutterBottom","variant","component","color","TotalCases","useState","setCases","useEffect","Axios","get","then","response","data","catch","err","console","log","Fragment","AlignItemsList","country","totalCases","casesReportedToday","deathsReportedToday","active","totalDeaths","critical","ListofCountry","countryCase","setCountryCase","search","setSearch","searchData","setSearchData","searchTrue","setSearchTrue","searchUrl","onSubmit","e","preventDefault","type","id","value","onChange","target","slength","length","htmlFor","todayCases","todayDeaths","map","cc","key","About","href","TabPanel","children","index","other","role","hidden","aria-labelledby","Box","p","a11yProps","theme","flexGrow","backgroundColor","palette","background","paper","SimpleTabs","React","setValue","AppBar","position","Tabs","centered","event","newValue","aria-label","Tab","icon","label","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.11b3f59b.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nimport Grid from '@material-ui/core/Grid'\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nconst MediaCard = props => {\n\n    const {cases, deaths, recovered} = props;\n\n  const classes = useStyles();\n\n  return (\n    \n\n    <Grid container direction=\"column\" justify=\"space-between\" alignItems=\"stretch\">\n        <Grid item direction=\"column\">\n            <Card className={classes.root}>\n            <CardActionArea>\n                \n                <CardContent>\n                <Typography gutterBottom variant=\"h4\" component=\"h1\">\n                    Total Cases :\n                </Typography>\n                <Typography variant=\"h5\" color=\"textSecondary\" component=\"h2\">\n                    {cases}\n                </Typography>\n\n                <Typography gutterBottom variant=\"h4\" component=\"h1\">\n                    Deaths :\n                </Typography>\n                <Typography variant=\"h5\" color=\"textSecondary\" component=\"h2\">\n                    {deaths}\n                </Typography>\n\n                <Typography gutterBottom variant=\"h4\" component=\"h1\">\n                    Recovered :\n                </Typography>\n                <Typography variant=\"h5\" color=\"textSecondary\" component=\"h2\">\n                    {recovered}\n                </Typography>\n                \n                </CardContent>\n            </CardActionArea>\n            </Card>\n        </Grid>\n        \n    </Grid>\n  );\n}\n\nexport default MediaCard;","import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport MediaCard from \"./Card\";\n\n// import './TestCases.css';\n// import CardExample from '../MbdReact/MBD-Card';\n\nconst TotalCases = () => {\n  const [cases, setCases] = useState([]);\n\n  useEffect(() => {\n    Axios.get(\"https://corona.lmao.ninja/v2/all\")\n      .then((response) => {\n        // console.log(response.data)\n        setCases(response.data);\n      })\n      .catch((err) => {\n        console.log(\"There was some error fetching the data\");\n      });\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"container my-5\">\n        <h1 className=\"h1 my-5\">Global COVID-19 Information</h1>\n        <div className=\"row\">\n          <div className=\"col-md-4\"></div>\n\n          <div className=\"col-md-6 center\">\n            {\" \"}\n            <MediaCard\n              cases={cases.cases}\n              deaths={cases.deaths}\n              recovered={cases.recovered}\n            />{\" \"}\n          </div>\n\n          <div className=\"col-md-2\"></div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default TotalCases;\n","import React from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\n// import List from '@material-ui/core/List';\n// import ListItem from '@material-ui/core/ListItem';\n// import Divider from '@material-ui/core/Divider';\n// import ListItemText from '@material-ui/core/ListItemText';\n// import Typography from '@material-ui/core/Typography';\n\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     width: '100%',\n//     maxWidth: '36ch',\n//     backgroundColor: theme.palette.background.paper,\n//   },\n//   inline: {\n//     display: 'inline',\n//   },\n// }));\n\n// const AlignItemsList = props => {\n//     const {country, totalCases, casesReportedToday, deathsReportedToday, active, totalDeaths, recovered, critical} = props;\n//   const classes = useStyles();\n\n//   return (\n//     <List className={classes.root}>\n//       <ListItem alignItems=\"flex-start\">\n//         <ListItemText\n//           primary={country} //country name\n//           secondary={\n//             <React.Fragment>\n//               <Typography\n//                 component=\"span\"\n//                 variant=\"body2\"\n//                 className={classes.inline}\n//                 color=\"textPrimary\"\n//               >\n//                 {/* total cases | reportedToday | Active*/}\n//                 Total Cases : {totalCases} || Today : {casesReportedToday} || Active : {active}\n//               </Typography>\n//               <br />\n\n//               <Typography\n//                 component=\"span\"\n//                 variant=\"body2\"\n//                 className={classes.inline}\n//                 color=\"textPrimary\"\n//               >\n//                 {/* Deaths  | ReportedToday */}\n//                 Total Deaths : {totalDeaths} || Today : {deathsReportedToday}\n//               </Typography>\n//               <br />\n\n//               <Typography\n//                 component=\"span\"\n//                 variant=\"body2\"\n//                 className={classes.inline}\n//                 color=\"textPrimary\"\n//               >\n//                 {/* Recovered  | Critical */}\n//                 Recovered : {recovered} || Critical : {critical}\n//               </Typography>\n//             </React.Fragment>\n//           }\n//         />\n//       </ListItem>\n//       <Divider variant=\"inset\" component=\"li\" />  \n//     </List>\n//   );\n// }\n\n// export default AlignItemsList;\n\nconst AlignItemsList = props => {\n  const {country, totalCases, casesReportedToday, deathsReportedToday, active, totalDeaths, recovered, critical} = props;\n\n  return(\n    <React.Fragment>\n      <div className=\"container my-5\">\n        <div className=\"row my-5\">\n          <div className=\"col-md-12 my-1\">\n            <div className=\"card\">\n              <div className=\"view overlay\">\n              </div>\n              <div className=\"card-body\">\n                <h2 className=\"h3\">{country}</h2> <br />\n                <h4 className=\" card-subtitle my-3\">Total Cases : {totalCases} || Today : {casesReportedToday} || Active : {active}</h4>\n                <h4 className=\" card-subtitle my-3\">Total Deaths : {totalDeaths} || Today : {deathsReportedToday}</h4>\n                <h4 className=\" card-subtitle my-3\">Total Recovered : {recovered} || Critical : {critical}</h4>\n                \n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n\n}\n\nexport default AlignItemsList;","import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport AlignItemsList from \"./ListComponent\";\n\nconst ListofCountry = () => {\n  const [countryCase, setCountryCase] = useState([]);\n\n  const [search, setSearch] = useState(\"\");\n\n  const [searchData, setSearchData] = useState(\"\");\n\n  const [searchTrue, setSearchTrue] = useState(false);\n\n  useEffect(() => {\n    Axios.get(\"https://corona.lmao.ninja/v2/countries\").then((response) => {\n      setCountryCase(response.data);\n      setSearchTrue(false);\n    });\n  }, []);\n\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n    // console.log(search.length)\n    const slength = search.length - 1;\n    if (slength === 0) {\n      setSearchTrue(false);\n    } else {\n      setSearchTrue(true);\n    }\n  };\n\n  useEffect(() => {\n    const searchUrl = \"https://corona.lmao.ninja/v2/countries/\" + search;\n    Axios.get(searchUrl)\n      .then((response) => {\n        setSearchData(response.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [search]);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"h1\">\n        This section shows the list of countries with their data\n      </h1>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <div className=\"md-form form-lg\">\n          <input\n            type=\"text\"\n            id=\"inputLGEx\"\n            className=\"form-control form-control-lg\"\n            value={search}\n            onChange={handleChange}\n          />\n          <label htmlFor=\"inputLGEx\">Search</label>\n        </div>\n      </form>\n      {searchTrue ? (\n        <AlignItemsList\n          totalCases={searchData.cases}\n          country={searchData.country}\n          casesReportedToday={searchData.todayCases}\n          deathsReportedToday={searchData.todayDeaths}\n          active={searchData.active}\n          totalDeaths={searchData.deaths}\n          recovered={searchData.recovered}\n          critical={searchData.critical}\n        />\n      ) : null}\n\n      {countryCase.map((cc) => (\n        <AlignItemsList\n          key={cc.country}\n          totalCases={cc.cases}\n          country={cc.country}\n          casesReportedToday={cc.todayCases}\n          deathsReportedToday={cc.todayDeaths}\n          active={cc.active}\n          totalDeaths={cc.deaths}\n          recovered={cc.recovered}\n          critical={cc.critical}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ListofCountry;\n","import React from 'react'\n\nconst About = () => {\n    return(\n        <div>\n            <h1 className=\"h2\">Built By : Akshay Raichur</h1> <br /> <br />\n\n            <h4> <a href=\"https://github.com/akshayraichur\"> Github </a> </h4> <br />\n            <h4> <a href=\"https://www.instagram.com/akshay.raichur/\"> Instagram </a> </h4>\n\n\n            {/* <h3 className=\"h4\">API Credits <a href=\"https://github.com/NovelCOVID\"> NovelCOVID </a></h3> */}\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport TotalCases from './TotalCases';\nimport ListofCountry from './ListofCountry';\nimport About from './About';\n\nimport PublicIcon from '@material-ui/icons/Public';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FlagIcon from '@material-ui/icons/Flag';\n\n\n\n\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function SimpleTabs() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs value={value} variant=\"fullWidth\" centered onChange={handleChange} aria-label=\"simple tabs example\">\n          <Tab icon={<PublicIcon />} label=\"Global Cases\" {...a11yProps(0)} />\n          <Tab icon={<FlagIcon />} label=\"Countries\" {...a11yProps(1)} />\n          <Tab icon={<InfoIcon />} label=\"About\" {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <TotalCases />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <ListofCountry />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <About />\n      </TabPanel>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport SimpleTabs from './components/Tabs';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <SimpleTabs />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}